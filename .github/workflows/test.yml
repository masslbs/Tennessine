# SPDX-FileCopyrightText: 2024 Mass Labs
#
# SPDX-License-Identifier: MIT

name: test

on: [push]

jobs:
  browser-tests:
    timeout-minutes: 15
    runs-on: [self-hosted, linux]

    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
        with:
          path: Tennessine

      # not needed on self-hosted but kept around if we want to use it on github-hosted
      #- name: Install Nix
      #  uses: DeterminateSystems/nix-installer-action@main
      #- uses: DeterminateSystems/magic-nix-cache-action@main
      - uses: DeterminateSystems/flake-checker-action@main
        with:
          flake-lock-path: Tennessine/packages/client/flake.lock

      - name: Start local testnet
        run: |
          nix develop -c local-testnet -D -L logs/process-compose.log
        working-directory: Tennessine/

      - name: Run Lint
        run: nix develop -c bash -c "deno lint"
        working-directory: Tennessine/

      - name: Run formatting check
        run: nix develop -c bash -c "deno fmt --check"
        working-directory: Tennessine/

      - name: Type Check packages
        run: nix develop -c bash -c "deno check ."
        working-directory: Tennessine/

      # if this fails check the logs of the prior job. The relay should log it's failure reason there.
      # the logs for the other services might be bit harder to come by since they are orchestrated by docker.
      - name: check services running? 1. relay, 2. ipfs, 3. anvil
        run: |
          set -e
          # TODO: would be nice to have this all in probes and use a process-compose cli call to check readiness
          curl http://localhost:8321/live
          curl http://localhost:8321/processes | jq .data

          timeout=10;
          while [ $timeout -gt 0 ]; do
            # check if relay is ready
            processStateFname=Tennessine/logs/processes-${timeout}.json
            curl http://localhost:8321/processes > $processStateFname
            isReady=$(cat $processStateFname | jq -r '.data[] | select(.name == "relay") | .is_ready')
            if [ "$isReady" == "Ready" ]; then
              break
            fi
            echo "Relay is not ready, waiting for $timeout seconds"
            timeout=$((timeout - 1))
            sleep 5
          done

          if [ "$isReady" != "Ready" ]; then
            echo "Relay is not ready"
            nix run '.#local-testnet-dev' -- down
            exit 1
          fi

          # TODO: redundant once probes are in place
          curl http://localhost:4444/health
          curl http://localhost:5001/api/v0/version -X POST
          curl http://localhost:8545/ -X POST -H 'content-type: application/json' --data-raw '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":0}'

      - name: Run tests
        run: nix develop -c bash -c "deno test -A --no-check --fail-fast"
        working-directory: Tennessine/

      - name: Shut down local testnet
        run: nix develop -c local-testnet down
        working-directory: Tennessine/

      - name: build frontend
        run: nix develop -c bash -c "deno run production"
        working-directory: Tennessine/packages/frontend

      - name: Upload frontend to IPFS
        run: |
          echo "Build Available as:" >> $GITHUB_STEP_SUMMARY
          ipfs-cluster-ctl add -r -n frontend --cid-version 1 ./dist > ipfs-cluster-add.log
          cid=$(egrep -o 'added (.*)' ipfs-cluster-add.log | cut -d ' ' -f2 | tail -n 1)
          echo "https://$cid.ipfs.inbrowser.link" >> $GITHUB_STEP_SUMMARY
        working-directory: Tennessine/packages/frontend

      - name: Upload frontend build as artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build.zip
          path: Tennessine/packages/frontend/dist

      - name: Upload service compose log on failure
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: process-compose-log.txt
          path: Tennessine/logs/
