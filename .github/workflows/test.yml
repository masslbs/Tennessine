# SPDX-FileCopyrightText: 2024 Mass Labs
#
# SPDX-License-Identifier: MIT

name: test

on: [push]

env:
  PGUSER: postgres
  PGPASSWORD: postgres
  PGHOST: localhost
  PGPORT: 5432

jobs:
  browser-tests:
    timeout-minutes: 15
    runs-on: [self-hosted, linux]

    permissions:
      contents: read

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      ipfs:
        image: cryptix/ipfs-offline:v1
        ports:
          - 5001:5001

    steps:
      - uses: actions/checkout@v4
        with:
          path: Tennessine

      # not needed on self-hosted but kept around if we want to use it on github-hosted
      #- name: Install Nix
      #  uses: DeterminateSystems/nix-installer-action@main
      #- uses: DeterminateSystems/magic-nix-cache-action@main
      - uses: DeterminateSystems/flake-checker-action@main
        with:
          flake-lock-path: Tennessine/packages/client/flake.lock

      - name: Extract branch name for other checkouts
        shell: bash
        run: echo "branch=$(jq -r '.nodes["relay"].locked.rev' Tennessine/flake.lock)" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: git clone relay
        uses: actions/checkout@v4
        with:
          repository: masslbs/relay
          ref: ${{ steps.extract_branch.outputs.branch }}
          path: relay

      - name: Start local testnet
        run: |
          nix develop -c local-testnet -D
        working-directory: Tennessine/

      # - name: Run Lint
      #   run: nix develop -c bash -c "deno lint"
      #   working-directory: Tennessine/

      - name: Run formatting check
        run: nix develop -c bash -c "deno fmt --check"
        working-directory: Tennessine/

      # - name: Type Check packages
      #   run: nix develop -c bash -c "deno check ."
      #   working-directory: Tennessine/

      - name: Compile relay
        run: nix build '.#relay'
        working-directory: relay

      - name: prepare env file for relay
        run: |
          cp .env.sample .env
          cat .env
        working-directory: relay

      - name: initdb and start relay
        run: |
          createdb massmarket-relay-test
          psql massmarket-relay-test < ./db/schema.sql
          export $(egrep -v '^#' .env | xargs)
          ./result/bin/relay server > relay.log &
        working-directory: relay

      # if this fails check the logs of the prior job. The relay should log it's failure reason there.
      # the logs for the other services might be bit harder to come by since they are orchestrated by docker.
      - name: check services running? 1. relay, 2. ipfs, 3. anvil
        run: |
          set -e
          curl http://localhost:4444/health
          curl http://localhost:5001/api/v0/version -X POST
          curl http://localhost:8545/ -X POST -H 'content-type: application/json' --data-raw '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":0}'

      - name: Run tests
        # sentry logger needs homedir
        run: nix develop -c bash -c "deno test -A . --no-check"
        working-directory: Tennessine/

      - name: build frontend
        run: nix develop -c bash -c "deno run production"
        working-directory: Tennessine/packages/frontend

      - name: Upload frontend to Pinata
        run: |
          pinata auth ${{ secrets.PINATA_JWT }}
          echo "Build Available as:" >> $GITHUB_STEP_SUMMARY
          pinata upload --name "frontend-${{ github.sha }}" dist/ > pinata.log
          cid=$(egrep -o 'CID: (.*)' pinata.log | cut -d ' ' -f2)
          echo "https://$cid.ipfs.nftstorage.link" >> $GITHUB_STEP_SUMMARY
        working-directory: Tennessine/packages/frontend

      - name: Upload relay log on failure
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: relay-log.txt
          path: relay/relay.log
